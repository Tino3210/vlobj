Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement DOTCOMMA programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> square
Rule 6     statement -> pyramid
Rule 7     statement -> randomShape
Rule 8     statement -> randomNumber
Rule 9     statement -> color
Rule 10    statement -> expression
Rule 11    assignation -> IDENTIFIER EQUALS expression
Rule 12    assignation -> IDENTIFIER EQUALS randomNumber
Rule 13    randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 14    randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 15    randomNumber -> XD PAR_START expression COMMA expression PAR_END
Rule 16    square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 17    square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 18    pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 19    pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 20    color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
Rule 21    structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
Rule 22    structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END
Rule 23    structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
Rule 24    condition -> expression CONDITION expression
Rule 25    expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP
Rule 26    expression -> expression ADD_OP expression
Rule 27    expression -> expression MUL_OP expression
Rule 28    expression -> ADD_OP expression
Rule 29    expression -> APO IDENTIFIER APO
Rule 30    expression -> NUMBER
Rule 31    expression -> IDENTIFIER

Terminals, with rules where they appear

ACOL_END             : 21 22 23 23
ACOL_START           : 21 22 23 23
ADD_OP               : 25 25 26 28
APO                  : 29 29
COLOR                : 20
COMMA                : 13 13 13 14 14 14 14 15 16 16 16 17 17 17 17 18 18 18 19 19 19 19 20 20 20
CONDITION            : 24
DOTCOMMA             : 2
ELSE                 : 23
EQUALS               : 11 12
IDENTIFIER           : 11 12 25 29 31
IF                   : 22 23
MUL_OP               : 27
NUMBER               : 30
PAR_END              : 13 14 15 16 17 18 19 20 21 22 23
PAR_START            : 13 14 15 16 17 18 19 20 21 22 23
PYRAMID              : 18 19
SQUARE               : 16 17
UNDERSCORE           : 25
WHILE                : 21
XD                   : 15
XS                   : 13 14
error                : 

Nonterminals, with rules where they appear

assignation          : 3
color                : 9
condition            : 21 22 23
expression           : 10 11 13 13 13 13 14 14 14 14 14 15 15 16 16 16 16 17 17 17 17 17 18 18 18 18 19 19 19 19 19 20 20 20 20 24 24 26 26 27 27 28
programme            : 2 21 22 23 23 0
pyramid              : 6
randomNumber         : 8 12
randomShape          : 7
square               : 5
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement DOTCOMMA programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . square
    (6) statement -> . pyramid
    (7) statement -> . randomShape
    (8) statement -> . randomNumber
    (9) statement -> . color
    (10) statement -> . expression
    (11) assignation -> . IDENTIFIER EQUALS expression
    (12) assignation -> . IDENTIFIER EQUALS randomNumber
    (21) structure -> . WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
    (22) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (16) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (18) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (13) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END
    (20) color -> . COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    SQUARE          shift and go to state 14
    PYRAMID         shift and go to state 15
    XS              shift and go to state 16
    XD              shift and go to state 17
    COLOR           shift and go to state 18
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    square                         shift and go to state 5
    pyramid                        shift and go to state 6
    randomShape                    shift and go to state 7
    randomNumber                   shift and go to state 8
    color                          shift and go to state 9
    expression                     shift and go to state 10

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . DOTCOMMA programme

    $end            reduce using rule 1 (programme -> statement .)
    ACOL_END        reduce using rule 1 (programme -> statement .)
    DOTCOMMA        shift and go to state 22


state 3

    (3) statement -> assignation .

    DOTCOMMA        reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    ACOL_END        reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    DOTCOMMA        reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    ACOL_END        reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> square .

    DOTCOMMA        reduce using rule 5 (statement -> square .)
    $end            reduce using rule 5 (statement -> square .)
    ACOL_END        reduce using rule 5 (statement -> square .)


state 6

    (6) statement -> pyramid .

    DOTCOMMA        reduce using rule 6 (statement -> pyramid .)
    $end            reduce using rule 6 (statement -> pyramid .)
    ACOL_END        reduce using rule 6 (statement -> pyramid .)


state 7

    (7) statement -> randomShape .

    DOTCOMMA        reduce using rule 7 (statement -> randomShape .)
    $end            reduce using rule 7 (statement -> randomShape .)
    ACOL_END        reduce using rule 7 (statement -> randomShape .)


state 8

    (8) statement -> randomNumber .

    DOTCOMMA        reduce using rule 8 (statement -> randomNumber .)
    $end            reduce using rule 8 (statement -> randomNumber .)
    ACOL_END        reduce using rule 8 (statement -> randomNumber .)


state 9

    (9) statement -> color .

    DOTCOMMA        reduce using rule 9 (statement -> color .)
    $end            reduce using rule 9 (statement -> color .)
    ACOL_END        reduce using rule 9 (statement -> color .)


state 10

    (10) statement -> expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    DOTCOMMA        reduce using rule 10 (statement -> expression .)
    $end            reduce using rule 10 (statement -> expression .)
    ACOL_END        reduce using rule 10 (statement -> expression .)
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 11

    (11) assignation -> IDENTIFIER . EQUALS expression
    (12) assignation -> IDENTIFIER . EQUALS randomNumber
    (25) expression -> IDENTIFIER . ADD_OP UNDERSCORE ADD_OP
    (31) expression -> IDENTIFIER .

  ! shift/reduce conflict for ADD_OP resolved as shift
    EQUALS          shift and go to state 25
    ADD_OP          shift and go to state 26
    MUL_OP          reduce using rule 31 (expression -> IDENTIFIER .)
    DOTCOMMA        reduce using rule 31 (expression -> IDENTIFIER .)
    $end            reduce using rule 31 (expression -> IDENTIFIER .)
    ACOL_END        reduce using rule 31 (expression -> IDENTIFIER .)

  ! ADD_OP          [ reduce using rule 31 (expression -> IDENTIFIER .) ]


state 12

    (21) structure -> WHILE . PAR_START condition PAR_END ACOL_START programme ACOL_END

    PAR_START       shift and go to state 27


state 13

    (22) structure -> IF . PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> IF . PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END

    PAR_START       shift and go to state 28


state 14

    (16) square -> SQUARE . PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> SQUARE . PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END

    PAR_START       shift and go to state 29


state 15

    (18) pyramid -> PYRAMID . PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID . PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END

    PAR_START       shift and go to state 30


state 16

    (13) randomShape -> XS . PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> XS . PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END

    PAR_START       shift and go to state 31


state 17

    (15) randomNumber -> XD . PAR_START expression COMMA expression PAR_END

    PAR_START       shift and go to state 32


state 18

    (20) color -> COLOR . PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END

    PAR_START       shift and go to state 33


state 19

    (28) expression -> ADD_OP . expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 34

state 20

    (29) expression -> APO . IDENTIFIER APO

    IDENTIFIER      shift and go to state 36


state 21

    (30) expression -> NUMBER .

    ADD_OP          reduce using rule 30 (expression -> NUMBER .)
    MUL_OP          reduce using rule 30 (expression -> NUMBER .)
    DOTCOMMA        reduce using rule 30 (expression -> NUMBER .)
    $end            reduce using rule 30 (expression -> NUMBER .)
    ACOL_END        reduce using rule 30 (expression -> NUMBER .)
    CONDITION       reduce using rule 30 (expression -> NUMBER .)
    COMMA           reduce using rule 30 (expression -> NUMBER .)
    PAR_END         reduce using rule 30 (expression -> NUMBER .)


state 22

    (2) programme -> statement DOTCOMMA . programme
    (1) programme -> . statement
    (2) programme -> . statement DOTCOMMA programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . square
    (6) statement -> . pyramid
    (7) statement -> . randomShape
    (8) statement -> . randomNumber
    (9) statement -> . color
    (10) statement -> . expression
    (11) assignation -> . IDENTIFIER EQUALS expression
    (12) assignation -> . IDENTIFIER EQUALS randomNumber
    (21) structure -> . WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
    (22) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (16) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (18) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (13) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END
    (20) color -> . COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    SQUARE          shift and go to state 14
    PYRAMID         shift and go to state 15
    XS              shift and go to state 16
    XD              shift and go to state 17
    COLOR           shift and go to state 18
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    statement                      shift and go to state 2
    programme                      shift and go to state 37
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    square                         shift and go to state 5
    pyramid                        shift and go to state 6
    randomShape                    shift and go to state 7
    randomNumber                   shift and go to state 8
    color                          shift and go to state 9
    expression                     shift and go to state 10

state 23

    (26) expression -> expression ADD_OP . expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 38

state 24

    (27) expression -> expression MUL_OP . expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 39

state 25

    (11) assignation -> IDENTIFIER EQUALS . expression
    (12) assignation -> IDENTIFIER EQUALS . randomNumber
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21
    XD              shift and go to state 17

    expression                     shift and go to state 40
    randomNumber                   shift and go to state 41

state 26

    (25) expression -> IDENTIFIER ADD_OP . UNDERSCORE ADD_OP

    UNDERSCORE      shift and go to state 42


state 27

    (21) structure -> WHILE PAR_START . condition PAR_END ACOL_START programme ACOL_END
    (24) condition -> . expression CONDITION expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    condition                      shift and go to state 43
    expression                     shift and go to state 44

state 28

    (22) structure -> IF PAR_START . condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> IF PAR_START . condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (24) condition -> . expression CONDITION expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    condition                      shift and go to state 45
    expression                     shift and go to state 44

state 29

    (16) square -> SQUARE PAR_START . expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> SQUARE PAR_START . expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 46

state 30

    (18) pyramid -> PYRAMID PAR_START . expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START . expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 47

state 31

    (13) randomShape -> XS PAR_START . expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> XS PAR_START . expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 48

state 32

    (15) randomNumber -> XD PAR_START . expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 49

state 33

    (20) color -> COLOR PAR_START . expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 50

state 34

    (28) expression -> ADD_OP expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 28 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 28 (expression -> ADD_OP expression .)
    DOTCOMMA        reduce using rule 28 (expression -> ADD_OP expression .)
    $end            reduce using rule 28 (expression -> ADD_OP expression .)
    ACOL_END        reduce using rule 28 (expression -> ADD_OP expression .)
    CONDITION       reduce using rule 28 (expression -> ADD_OP expression .)
    COMMA           reduce using rule 28 (expression -> ADD_OP expression .)
    PAR_END         reduce using rule 28 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 23 ]
  ! MUL_OP          [ shift and go to state 24 ]


state 35

    (25) expression -> IDENTIFIER . ADD_OP UNDERSCORE ADD_OP
    (31) expression -> IDENTIFIER .

  ! shift/reduce conflict for ADD_OP resolved as shift
    ADD_OP          shift and go to state 26
    MUL_OP          reduce using rule 31 (expression -> IDENTIFIER .)
    DOTCOMMA        reduce using rule 31 (expression -> IDENTIFIER .)
    $end            reduce using rule 31 (expression -> IDENTIFIER .)
    ACOL_END        reduce using rule 31 (expression -> IDENTIFIER .)
    CONDITION       reduce using rule 31 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 31 (expression -> IDENTIFIER .)
    PAR_END         reduce using rule 31 (expression -> IDENTIFIER .)

  ! ADD_OP          [ reduce using rule 31 (expression -> IDENTIFIER .) ]


state 36

    (29) expression -> APO IDENTIFIER . APO

    APO             shift and go to state 51


state 37

    (2) programme -> statement DOTCOMMA programme .

    $end            reduce using rule 2 (programme -> statement DOTCOMMA programme .)
    ACOL_END        reduce using rule 2 (programme -> statement DOTCOMMA programme .)


state 38

    (26) expression -> expression ADD_OP expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 26 (expression -> expression ADD_OP expression .)
    DOTCOMMA        reduce using rule 26 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 26 (expression -> expression ADD_OP expression .)
    ACOL_END        reduce using rule 26 (expression -> expression ADD_OP expression .)
    CONDITION       reduce using rule 26 (expression -> expression ADD_OP expression .)
    COMMA           reduce using rule 26 (expression -> expression ADD_OP expression .)
    PAR_END         reduce using rule 26 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 24

  ! MUL_OP          [ reduce using rule 26 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 23 ]


state 39

    (27) expression -> expression MUL_OP expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 27 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 27 (expression -> expression MUL_OP expression .)
    DOTCOMMA        reduce using rule 27 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 27 (expression -> expression MUL_OP expression .)
    ACOL_END        reduce using rule 27 (expression -> expression MUL_OP expression .)
    CONDITION       reduce using rule 27 (expression -> expression MUL_OP expression .)
    COMMA           reduce using rule 27 (expression -> expression MUL_OP expression .)
    PAR_END         reduce using rule 27 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 23 ]
  ! MUL_OP          [ shift and go to state 24 ]


state 40

    (11) assignation -> IDENTIFIER EQUALS expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    DOTCOMMA        reduce using rule 11 (assignation -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 11 (assignation -> IDENTIFIER EQUALS expression .)
    ACOL_END        reduce using rule 11 (assignation -> IDENTIFIER EQUALS expression .)
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 41

    (12) assignation -> IDENTIFIER EQUALS randomNumber .

    DOTCOMMA        reduce using rule 12 (assignation -> IDENTIFIER EQUALS randomNumber .)
    $end            reduce using rule 12 (assignation -> IDENTIFIER EQUALS randomNumber .)
    ACOL_END        reduce using rule 12 (assignation -> IDENTIFIER EQUALS randomNumber .)


state 42

    (25) expression -> IDENTIFIER ADD_OP UNDERSCORE . ADD_OP

    ADD_OP          shift and go to state 52


state 43

    (21) structure -> WHILE PAR_START condition . PAR_END ACOL_START programme ACOL_END

    PAR_END         shift and go to state 53


state 44

    (24) condition -> expression . CONDITION expression
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    CONDITION       shift and go to state 54
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 45

    (22) structure -> IF PAR_START condition . PAR_END ACOL_START programme ACOL_END
    (23) structure -> IF PAR_START condition . PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END

    PAR_END         shift and go to state 55


state 46

    (16) square -> SQUARE PAR_START expression . COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> SQUARE PAR_START expression . COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 56
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 47

    (18) pyramid -> PYRAMID PAR_START expression . COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression . COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 57
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 48

    (13) randomShape -> XS PAR_START expression . COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> XS PAR_START expression . COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 58
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 49

    (15) randomNumber -> XD PAR_START expression . COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 59
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 50

    (20) color -> COLOR PAR_START expression . COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 60
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 51

    (29) expression -> APO IDENTIFIER APO .

    ADD_OP          reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    MUL_OP          reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    DOTCOMMA        reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    $end            reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    ACOL_END        reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    CONDITION       reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    COMMA           reduce using rule 29 (expression -> APO IDENTIFIER APO .)
    PAR_END         reduce using rule 29 (expression -> APO IDENTIFIER APO .)


state 52

    (25) expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .

    ADD_OP          reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    MUL_OP          reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    DOTCOMMA        reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    $end            reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    ACOL_END        reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    CONDITION       reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    COMMA           reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)
    PAR_END         reduce using rule 25 (expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP .)


state 53

    (21) structure -> WHILE PAR_START condition PAR_END . ACOL_START programme ACOL_END

    ACOL_START      shift and go to state 61


state 54

    (24) condition -> expression CONDITION . expression
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 62

state 55

    (22) structure -> IF PAR_START condition PAR_END . ACOL_START programme ACOL_END
    (23) structure -> IF PAR_START condition PAR_END . ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END

    ACOL_START      shift and go to state 63


state 56

    (16) square -> SQUARE PAR_START expression COMMA . expression COMMA expression COMMA expression PAR_END
    (17) square -> SQUARE PAR_START expression COMMA . expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 64

state 57

    (18) pyramid -> PYRAMID PAR_START expression COMMA . expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA . expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 65

state 58

    (13) randomShape -> XS PAR_START expression COMMA . expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> XS PAR_START expression COMMA . expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 66

state 59

    (15) randomNumber -> XD PAR_START expression COMMA . expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 67

state 60

    (20) color -> COLOR PAR_START expression COMMA . expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 68

state 61

    (21) structure -> WHILE PAR_START condition PAR_END ACOL_START . programme ACOL_END
    (1) programme -> . statement
    (2) programme -> . statement DOTCOMMA programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . square
    (6) statement -> . pyramid
    (7) statement -> . randomShape
    (8) statement -> . randomNumber
    (9) statement -> . color
    (10) statement -> . expression
    (11) assignation -> . IDENTIFIER EQUALS expression
    (12) assignation -> . IDENTIFIER EQUALS randomNumber
    (21) structure -> . WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
    (22) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (16) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (18) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (13) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END
    (20) color -> . COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    SQUARE          shift and go to state 14
    PYRAMID         shift and go to state 15
    XS              shift and go to state 16
    XD              shift and go to state 17
    COLOR           shift and go to state 18
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    programme                      shift and go to state 69
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    square                         shift and go to state 5
    pyramid                        shift and go to state 6
    randomShape                    shift and go to state 7
    randomNumber                   shift and go to state 8
    color                          shift and go to state 9
    expression                     shift and go to state 10

state 62

    (24) condition -> expression CONDITION expression .
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         reduce using rule 24 (condition -> expression CONDITION expression .)
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 63

    (22) structure -> IF PAR_START condition PAR_END ACOL_START . programme ACOL_END
    (23) structure -> IF PAR_START condition PAR_END ACOL_START . programme ACOL_END ELSE ACOL_START programme ACOL_END
    (1) programme -> . statement
    (2) programme -> . statement DOTCOMMA programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . square
    (6) statement -> . pyramid
    (7) statement -> . randomShape
    (8) statement -> . randomNumber
    (9) statement -> . color
    (10) statement -> . expression
    (11) assignation -> . IDENTIFIER EQUALS expression
    (12) assignation -> . IDENTIFIER EQUALS randomNumber
    (21) structure -> . WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
    (22) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (16) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (18) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (13) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END
    (20) color -> . COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    SQUARE          shift and go to state 14
    PYRAMID         shift and go to state 15
    XS              shift and go to state 16
    XD              shift and go to state 17
    COLOR           shift and go to state 18
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    programme                      shift and go to state 70
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    square                         shift and go to state 5
    pyramid                        shift and go to state 6
    randomShape                    shift and go to state 7
    randomNumber                   shift and go to state 8
    color                          shift and go to state 9
    expression                     shift and go to state 10

state 64

    (16) square -> SQUARE PAR_START expression COMMA expression . COMMA expression COMMA expression PAR_END
    (17) square -> SQUARE PAR_START expression COMMA expression . COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 71
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 65

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression . COMMA expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA expression . COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 72
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 66

    (13) randomShape -> XS PAR_START expression COMMA expression . COMMA expression COMMA expression PAR_END
    (14) randomShape -> XS PAR_START expression COMMA expression . COMMA expression COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 73
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 67

    (15) randomNumber -> XD PAR_START expression COMMA expression . PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 74
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 68

    (20) color -> COLOR PAR_START expression COMMA expression . COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 75
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 69

    (21) structure -> WHILE PAR_START condition PAR_END ACOL_START programme . ACOL_END

    ACOL_END        shift and go to state 76


state 70

    (22) structure -> IF PAR_START condition PAR_END ACOL_START programme . ACOL_END
    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme . ACOL_END ELSE ACOL_START programme ACOL_END

    ACOL_END        shift and go to state 77


state 71

    (16) square -> SQUARE PAR_START expression COMMA expression COMMA . expression COMMA expression PAR_END
    (17) square -> SQUARE PAR_START expression COMMA expression COMMA . expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 78

state 72

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA . expression COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA . expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 79

state 73

    (13) randomShape -> XS PAR_START expression COMMA expression COMMA . expression COMMA expression PAR_END
    (14) randomShape -> XS PAR_START expression COMMA expression COMMA . expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 80

state 74

    (15) randomNumber -> XD PAR_START expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 15 (randomNumber -> XD PAR_START expression COMMA expression PAR_END .)
    $end            reduce using rule 15 (randomNumber -> XD PAR_START expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 15 (randomNumber -> XD PAR_START expression COMMA expression PAR_END .)


state 75

    (20) color -> COLOR PAR_START expression COMMA expression COMMA . expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 81

state 76

    (21) structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END .

    DOTCOMMA        reduce using rule 21 (structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END .)
    $end            reduce using rule 21 (structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END .)
    ACOL_END        reduce using rule 21 (structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END .)


state 77

    (22) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END .
    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END . ELSE ACOL_START programme ACOL_END

    DOTCOMMA        reduce using rule 22 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END .)
    $end            reduce using rule 22 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END .)
    ACOL_END        reduce using rule 22 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END .)
    ELSE            shift and go to state 82


state 78

    (16) square -> SQUARE PAR_START expression COMMA expression COMMA expression . COMMA expression PAR_END
    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression . COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 83
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 79

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression . COMMA expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression . COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 84
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 80

    (13) randomShape -> XS PAR_START expression COMMA expression COMMA expression . COMMA expression PAR_END
    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression . COMMA expression COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 85
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 81

    (20) color -> COLOR PAR_START expression COMMA expression COMMA expression . COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    COMMA           shift and go to state 86
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 82

    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE . ACOL_START programme ACOL_END

    ACOL_START      shift and go to state 87


state 83

    (16) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA . expression PAR_END
    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA . expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 88

state 84

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA . expression PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA . expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 89

state 85

    (13) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA . expression PAR_END
    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA . expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 90

state 86

    (20) color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA . expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 91

state 87

    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START . programme ACOL_END
    (1) programme -> . statement
    (2) programme -> . statement DOTCOMMA programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . square
    (6) statement -> . pyramid
    (7) statement -> . randomShape
    (8) statement -> . randomNumber
    (9) statement -> . color
    (10) statement -> . expression
    (11) assignation -> . IDENTIFIER EQUALS expression
    (12) assignation -> . IDENTIFIER EQUALS randomNumber
    (21) structure -> . WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END
    (22) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END
    (23) structure -> . IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END
    (16) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (17) square -> . SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (18) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (19) pyramid -> . PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (13) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (14) randomShape -> . XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END
    (15) randomNumber -> . XD PAR_START expression COMMA expression PAR_END
    (20) color -> . COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    SQUARE          shift and go to state 14
    PYRAMID         shift and go to state 15
    XS              shift and go to state 16
    XD              shift and go to state 17
    COLOR           shift and go to state 18
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    programme                      shift and go to state 92
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    square                         shift and go to state 5
    pyramid                        shift and go to state 6
    randomShape                    shift and go to state 7
    randomNumber                   shift and go to state 8
    color                          shift and go to state 9
    expression                     shift and go to state 10

state 88

    (16) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression . PAR_END
    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression . COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 94
    COMMA           shift and go to state 93
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 89

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression . PAR_END
    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression . COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 96
    COMMA           shift and go to state 95
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 90

    (13) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression . PAR_END
    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression . COMMA expression PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 98
    COMMA           shift and go to state 97
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 91

    (20) color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression . PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 99
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 92

    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme . ACOL_END

    ACOL_END        shift and go to state 100


state 93

    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA . expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 101

state 94

    (16) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 16 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 16 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 16 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 95

    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA . expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 102

state 96

    (18) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 18 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 18 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 18 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 97

    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA . expression PAR_END
    (25) expression -> . IDENTIFIER ADD_OP UNDERSCORE ADD_OP
    (26) expression -> . expression ADD_OP expression
    (27) expression -> . expression MUL_OP expression
    (28) expression -> . ADD_OP expression
    (29) expression -> . APO IDENTIFIER APO
    (30) expression -> . NUMBER
    (31) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 35
    ADD_OP          shift and go to state 19
    APO             shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 103

state 98

    (13) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 13 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 13 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 13 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 99

    (20) color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 20 (color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 20 (color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 20 (color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 100

    (23) structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END .

    DOTCOMMA        reduce using rule 23 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END .)
    $end            reduce using rule 23 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END .)
    ACOL_END        reduce using rule 23 (structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END .)


state 101

    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression . PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 104
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 102

    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression . PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 105
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 103

    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression . PAR_END
    (26) expression -> expression . ADD_OP expression
    (27) expression -> expression . MUL_OP expression

    PAR_END         shift and go to state 106
    ADD_OP          shift and go to state 23
    MUL_OP          shift and go to state 24


state 104

    (17) square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 17 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 17 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 17 (square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 105

    (19) pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 19 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 19 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 19 (pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)


state 106

    (14) randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .

    DOTCOMMA        reduce using rule 14 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    $end            reduce using rule 14 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)
    ACOL_END        reduce using rule 14 (randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 11 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 35 resolved as shift
