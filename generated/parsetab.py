
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSACOL_END ACOL_START ADD_OP COLOR COMMA CONDITION DOTCOMMA ELSE EQUALS IDENTIFIER IF MUL_OP NUMBER PAR_END PAR_START PYRAMID SQUARE STRING WHILE XD XSprogramme : statementprogramme : statement DOTCOMMA programmestatement : assignation\n                    | structure\n                    | square\n                    | pyramid\n                    | colorassignation : IDENTIFIER EQUALS expressionsquare : SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_ENDpyramid : PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDcolor : COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_ENDstructure : WHILE expression ACOL_START programme ACOL_ENDexpression : expression ADD_OP expression \n                    | expression MUL_OP expressionexpression : ADD_OP expression %prec UMINUSexpression : NUMBER\n                    | STRINGexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,9,13,14,16,20,21,22,25,26,27,35,36,37,42,43,44,48,49,50,55,],[8,19,8,19,19,19,19,19,8,19,19,19,19,19,19,19,19,19,19,19,19,]),'WHILE':([0,13,25,],[9,9,9,]),'SQUARE':([0,13,25,],[10,10,10,]),'PYRAMID':([0,13,25,],[11,11,11,]),'COLOR':([0,13,25,],[12,12,12,]),'$end':([1,2,3,4,5,6,7,17,18,19,23,24,28,33,34,38,54,56,57,59,],[0,-1,-3,-4,-5,-6,-7,-17,-18,-19,-2,-8,-16,-14,-15,-13,-9,-10,-12,-11,]),'ACOL_END':([2,3,4,5,6,7,17,18,19,23,24,28,32,33,34,38,54,56,57,59,],[-1,-3,-4,-5,-6,-7,-17,-18,-19,-2,-8,-16,38,-14,-15,-13,-9,-10,-12,-11,]),'DOTCOMMA':([2,3,4,5,6,7,17,18,19,24,28,33,34,38,54,56,57,59,],[13,-3,-4,-5,-6,-7,-17,-18,-19,-8,-16,-14,-15,-13,-9,-10,-12,-11,]),'EQUALS':([8,],[14,]),'ADD_OP':([9,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,],[16,16,26,16,-17,-18,-19,16,16,16,26,16,16,-16,26,26,26,-14,-15,16,16,16,26,26,26,16,16,16,26,26,26,16,16,16,26,26,26,16,26,]),'NUMBER':([9,14,16,20,21,22,26,27,35,36,37,42,43,44,48,49,50,55,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'STRING':([9,14,16,20,21,22,26,27,35,36,37,42,43,44,48,49,50,55,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'PAR_START':([10,11,12,],[20,21,22,]),'ACOL_START':([15,17,18,19,28,33,34,],[25,-17,-18,-19,-16,-14,-15,]),'MUL_OP':([15,17,18,19,24,28,29,30,31,33,34,39,40,41,45,46,47,51,52,53,58,],[27,-17,-18,-19,27,-16,27,27,27,27,-15,27,27,27,27,27,27,27,27,27,27,]),'COMMA':([17,18,19,28,29,30,31,33,34,39,40,41,45,46,47,52,],[-17,-18,-19,-16,35,36,37,-14,-15,42,43,44,48,49,50,55,]),'PAR_END':([17,18,19,28,33,34,51,52,53,58,],[-17,-18,-19,-16,-14,-15,54,56,57,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,13,25,],[1,23,32,]),'statement':([0,13,25,],[2,2,2,]),'assignation':([0,13,25,],[3,3,3,]),'structure':([0,13,25,],[4,4,4,]),'square':([0,13,25,],[5,5,5,]),'pyramid':([0,13,25,],[6,6,6,]),'color':([0,13,25,],[7,7,7,]),'expression':([9,14,16,20,21,22,26,27,35,36,37,42,43,44,48,49,50,55,],[15,24,28,29,30,31,33,34,39,40,41,45,46,47,51,52,53,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser.py',24),
  ('programme -> statement DOTCOMMA programme','programme',3,'p_programme_recursive','parser.py',29),
  ('statement -> assignation','statement',1,'p_statement','parser.py',35),
  ('statement -> structure','statement',1,'p_statement','parser.py',36),
  ('statement -> square','statement',1,'p_statement','parser.py',37),
  ('statement -> pyramid','statement',1,'p_statement','parser.py',38),
  ('statement -> color','statement',1,'p_statement','parser.py',39),
  ('assignation -> IDENTIFIER EQUALS expression','assignation',3,'p_assignation','parser.py',46),
  ('square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','square',10,'p_square','parser.py',50),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',10,'p_pyramid','parser.py',54),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',12,'p_pyramid','parser.py',55),
  ('color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','color',10,'p_color','parser.py',62),
  ('structure -> WHILE expression ACOL_START programme ACOL_END','structure',5,'p_while','parser.py',66),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser.py',70),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser.py',71),
  ('expression -> ADD_OP expression','expression',2,'p_expression_uminus','parser.py',75),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',79),
  ('expression -> STRING','expression',1,'p_expression_num','parser.py',80),
  ('expression -> IDENTIFIER','expression',1,'p_expression_IDENTIFIER','parser.py',85),
]
