
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSACOL_END ACOL_START ADD_OP COLOR COMMA CONDITION DOTCOMMA ELSE EQUALS IDENTIFIER IF MUL_OP NUMBER PAR_END PAR_START PYRAMID SQUARE STRING UNDERSCORE WHILE XD XSprogramme : statementprogramme : statement DOTCOMMA programmestatement : assignation\n                    | structure\n                    | square\n                    | pyramid\n                    | randomShape\n                    | color\n                    | expressionassignation : IDENTIFIER EQUALS expressionrandomShape : XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDrandomnNumber : XD PAR_START NUMBER COMMA NUMBER PAR_ENDsquare : SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDpyramid : PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDcolor : COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_ENDstructure : WHILE PAR_START condition PAR_END ACOL_START programme ACOL_ENDstructure : IF PAR_START condition PAR_END ACOL_START programme ACOL_ENDcondition : expression CONDITION expressionexpression : IDENTIFIER ADD_OP UNDERSCORE ADD_OPexpression : expression ADD_OP expression \n                    | expression MUL_OP expressionexpression : ADD_OP expression %prec UMINUSexpression : NUMBER\n                    | STRINGexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,17,20,21,22,23,25,26,27,28,29,30,47,49,50,51,52,53,55,62,63,64,65,72,73,74,75,80,82,84,],[10,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,10,32,32,32,32,32,32,32,32,32,32,32,]),'WHILE':([0,20,53,55,],[11,11,11,11,]),'IF':([0,20,53,55,],[12,12,12,12,]),'SQUARE':([0,20,53,55,],[13,13,13,13,]),'PYRAMID':([0,20,53,55,],[14,14,14,14,]),'XS':([0,20,53,55,],[15,15,15,15,]),'COLOR':([0,20,53,55,],[16,16,16,16,]),'ADD_OP':([0,9,10,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,34,35,36,37,39,41,42,43,44,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,87,88,89,],[17,21,24,17,-26,-27,17,17,17,17,17,17,17,17,17,17,-25,24,-23,-24,21,45,21,21,21,21,21,-22,17,17,17,17,17,17,21,17,21,21,21,21,17,17,17,17,21,21,21,21,17,17,17,17,21,21,21,21,17,17,17,21,21,21,]),'NUMBER':([0,17,20,21,22,23,25,26,27,28,29,30,47,49,50,51,52,53,55,62,63,64,65,72,73,74,75,80,82,84,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'STRING':([0,17,20,21,22,23,25,26,27,28,29,30,47,49,50,51,52,53,55,62,63,64,65,72,73,74,75,80,82,84,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'$end':([1,2,3,4,5,6,7,8,9,10,18,19,31,32,33,34,35,36,45,66,67,81,83,85,86,90,91,92,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-28,-26,-27,-25,-28,-2,-23,-24,-10,-22,-19,-20,-14,-16,-11,-18,-15,-17,-12,]),'ACOL_END':([2,3,4,5,6,7,8,9,10,18,19,31,32,33,34,35,36,45,60,61,66,67,81,83,85,86,90,91,92,],[-1,-3,-4,-5,-6,-7,-8,-9,-28,-26,-27,-25,-28,-2,-23,-24,-10,-22,66,67,-19,-20,-14,-16,-11,-18,-15,-17,-12,]),'DOTCOMMA':([2,3,4,5,6,7,8,9,10,18,19,31,32,34,35,36,45,66,67,81,83,85,86,90,91,92,],[20,-3,-4,-5,-6,-7,-8,-9,-28,-26,-27,-25,-28,-23,-24,-10,-22,-19,-20,-14,-16,-11,-18,-15,-17,-12,]),'MUL_OP':([9,10,18,19,31,32,34,35,36,39,41,42,43,44,45,54,56,57,58,59,68,69,70,71,76,77,78,79,87,88,89,],[22,-28,-26,-27,-25,-28,22,-24,22,22,22,22,22,22,-22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'EQUALS':([10,],[23,]),'PAR_START':([11,12,13,14,15,16,],[25,26,27,28,29,30,]),'CONDITION':([18,19,31,32,34,35,39,45,],[-26,-27,-25,-28,-23,-24,47,-22,]),'COMMA':([18,19,31,32,34,35,41,42,43,44,45,56,57,58,59,68,69,70,71,76,77,78,],[-26,-27,-25,-28,-23,-24,49,50,51,52,-22,62,63,64,65,72,73,74,75,80,82,84,]),'PAR_END':([18,19,31,32,34,35,38,40,45,54,76,77,78,79,87,88,89,],[-26,-27,-25,-28,-23,-24,46,48,-22,-21,81,83,85,86,90,91,92,]),'UNDERSCORE':([24,],[37,]),'ACOL_START':([46,48,],[53,55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,20,53,55,],[1,33,60,61,]),'statement':([0,20,53,55,],[2,2,2,2,]),'assignation':([0,20,53,55,],[3,3,3,3,]),'structure':([0,20,53,55,],[4,4,4,4,]),'square':([0,20,53,55,],[5,5,5,5,]),'pyramid':([0,20,53,55,],[6,6,6,6,]),'randomShape':([0,20,53,55,],[7,7,7,7,]),'color':([0,20,53,55,],[8,8,8,8,]),'expression':([0,17,20,21,22,23,25,26,27,28,29,30,47,49,50,51,52,53,55,62,63,64,65,72,73,74,75,80,82,84,],[9,31,9,34,35,36,39,39,41,42,43,44,54,56,57,58,59,9,9,68,69,70,71,76,77,78,79,87,88,89,]),'condition':([25,26,],[38,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserVLOBJ.py',25),
  ('programme -> statement DOTCOMMA programme','programme',3,'p_programme_recursive','parserVLOBJ.py',31),
  ('statement -> assignation','statement',1,'p_statement','parserVLOBJ.py',37),
  ('statement -> structure','statement',1,'p_statement','parserVLOBJ.py',38),
  ('statement -> square','statement',1,'p_statement','parserVLOBJ.py',39),
  ('statement -> pyramid','statement',1,'p_statement','parserVLOBJ.py',40),
  ('statement -> randomShape','statement',1,'p_statement','parserVLOBJ.py',41),
  ('statement -> color','statement',1,'p_statement','parserVLOBJ.py',42),
  ('statement -> expression','statement',1,'p_statement','parserVLOBJ.py',43),
  ('assignation -> IDENTIFIER EQUALS expression','assignation',3,'p_assignation','parserVLOBJ.py',51),
  ('randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','randomShape',10,'p_random_shape','parserVLOBJ.py',56),
  ('randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','randomShape',12,'p_random_shape','parserVLOBJ.py',57),
  ('randomnNumber -> XD PAR_START NUMBER COMMA NUMBER PAR_END','randomnNumber',6,'p_random_number','parserVLOBJ.py',67),
  ('square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','square',10,'p_square','parserVLOBJ.py',72),
  ('square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','square',12,'p_square','parserVLOBJ.py',73),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',10,'p_pyramid','parserVLOBJ.py',83),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',12,'p_pyramid','parserVLOBJ.py',84),
  ('color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','color',10,'p_color','parserVLOBJ.py',94),
  ('structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END','structure',7,'p_while','parserVLOBJ.py',100),
  ('structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END','structure',7,'p_test','parserVLOBJ.py',105),
  ('condition -> expression CONDITION expression','condition',3,'p_condition','parserVLOBJ.py',110),
  ('expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP','expression',4,'p_expression_increment','parserVLOBJ.py',115),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserVLOBJ.py',120),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserVLOBJ.py',121),
  ('expression -> ADD_OP expression','expression',2,'p_expression_uminus','parserVLOBJ.py',126),
  ('expression -> NUMBER','expression',1,'p_expression_num','parserVLOBJ.py',131),
  ('expression -> STRING','expression',1,'p_expression_num','parserVLOBJ.py',132),
  ('expression -> IDENTIFIER','expression',1,'p_expression_IDENTIFIER','parserVLOBJ.py',137),
]
