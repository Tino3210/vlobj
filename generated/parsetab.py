
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSACOL_END ACOL_START ADD_OP APO COLOR COMMA CONDITION DOTCOMMA ELSE EQUALS IDENTIFIER IF MUL_OP NUMBER PAR_END PAR_START PYRAMID SQUARE UNDERSCORE WHILE XD XSprogramme : statementprogramme : statement DOTCOMMA programmestatement : assignation\n                    | structure\n                    | square\n                    | pyramid\n                    | randomShape\n                    | randomNumber\n                    | color\n                    | expressionassignation : IDENTIFIER EQUALS expression\n                    | IDENTIFIER EQUALS randomNumberrandomShape : XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDrandomNumber : XD PAR_START expression COMMA expression PAR_ENDsquare : SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDpyramid : PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END\n                | PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_ENDcolor : COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_ENDstructure : WHILE PAR_START condition PAR_END ACOL_START programme ACOL_ENDstructure : IF PAR_START condition PAR_END ACOL_START programme ACOL_END\n                    | IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_ENDcondition : expression CONDITION expressionexpression : IDENTIFIER ADD_OP UNDERSCORE ADD_OPexpression : expression ADD_OP expression \n                    | expression MUL_OP expressionexpression : ADD_OP expression %prec UMINUSexpression : APO IDENTIFIER APOexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,19,20,22,23,24,25,27,28,29,30,31,32,33,54,56,57,58,59,60,61,63,71,72,73,75,83,84,85,86,87,93,95,97,],[11,35,36,11,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,11,11,35,35,35,35,35,35,35,35,11,35,35,35,]),'WHILE':([0,22,61,63,87,],[12,12,12,12,12,]),'IF':([0,22,61,63,87,],[13,13,13,13,13,]),'SQUARE':([0,22,61,63,87,],[14,14,14,14,14,]),'PYRAMID':([0,22,61,63,87,],[15,15,15,15,15,]),'XS':([0,22,61,63,87,],[16,16,16,16,16,]),'XD':([0,22,25,61,63,87,],[17,17,17,17,17,17,]),'COLOR':([0,22,61,63,87,],[18,18,18,18,18,]),'ADD_OP':([0,10,11,19,21,22,23,24,25,27,28,29,30,31,32,33,34,35,38,39,40,42,44,46,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,75,78,79,80,81,83,84,85,86,87,88,89,90,91,93,95,97,101,102,103,],[19,23,26,19,-30,19,19,19,19,19,19,19,19,19,19,19,-28,26,-26,-27,23,52,23,23,23,23,23,23,-29,-25,19,19,19,19,19,19,19,23,19,23,23,23,23,23,19,19,19,19,23,23,23,23,19,19,19,19,19,23,23,23,23,19,19,19,23,23,23,]),'APO':([0,19,22,23,24,25,27,28,29,30,31,32,33,36,54,56,57,58,59,60,61,63,71,72,73,75,83,84,85,86,87,93,95,97,],[20,20,20,20,20,20,20,20,20,20,20,20,20,51,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'NUMBER':([0,19,22,23,24,25,27,28,29,30,31,32,33,54,56,57,58,59,60,61,63,71,72,73,75,83,84,85,86,87,93,95,97,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,21,34,35,37,38,39,40,41,51,52,74,76,77,94,96,98,99,100,104,105,106,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-31,-30,-28,-31,-2,-26,-27,-11,-12,-29,-25,-15,-21,-22,-16,-18,-13,-20,-23,-17,-19,-14,]),'ACOL_END':([2,3,4,5,6,7,8,9,10,11,21,34,35,37,38,39,40,41,51,52,69,70,74,76,77,92,94,96,98,99,100,104,105,106,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-31,-30,-28,-31,-2,-26,-27,-11,-12,-29,-25,76,77,-15,-21,-22,100,-16,-18,-13,-20,-23,-17,-19,-14,]),'DOTCOMMA':([2,3,4,5,6,7,8,9,10,11,21,34,35,38,39,40,41,51,52,74,76,77,94,96,98,99,100,104,105,106,],[22,-3,-4,-5,-6,-7,-8,-9,-10,-31,-30,-28,-31,-26,-27,-11,-12,-29,-25,-15,-21,-22,-16,-18,-13,-20,-23,-17,-19,-14,]),'MUL_OP':([10,11,21,34,35,38,39,40,44,46,47,48,49,50,51,52,62,64,65,66,67,68,78,79,80,81,88,89,90,91,101,102,103,],[24,-31,-30,-28,-31,24,-27,24,24,24,24,24,24,24,-29,-25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'EQUALS':([11,],[25,]),'PAR_START':([12,13,14,15,16,17,18,],[27,28,29,30,31,32,33,]),'CONDITION':([21,34,35,38,39,44,51,52,],[-30,-28,-31,-26,-27,54,-29,-25,]),'COMMA':([21,34,35,38,39,46,47,48,49,50,51,52,64,65,66,68,78,79,80,81,88,89,90,],[-30,-28,-31,-26,-27,56,57,58,59,60,-29,-25,71,72,73,75,83,84,85,86,93,95,97,]),'PAR_END':([21,34,35,38,39,43,45,51,52,62,67,88,89,90,91,101,102,103,],[-30,-28,-31,-26,-27,53,55,-29,-25,-24,74,94,96,98,99,104,105,106,]),'UNDERSCORE':([26,],[42,]),'ACOL_START':([53,55,82,],[61,63,87,]),'ELSE':([77,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,22,61,63,87,],[1,37,69,70,92,]),'statement':([0,22,61,63,87,],[2,2,2,2,2,]),'assignation':([0,22,61,63,87,],[3,3,3,3,3,]),'structure':([0,22,61,63,87,],[4,4,4,4,4,]),'square':([0,22,61,63,87,],[5,5,5,5,5,]),'pyramid':([0,22,61,63,87,],[6,6,6,6,6,]),'randomShape':([0,22,61,63,87,],[7,7,7,7,7,]),'randomNumber':([0,22,25,61,63,87,],[8,8,41,8,8,8,]),'color':([0,22,61,63,87,],[9,9,9,9,9,]),'expression':([0,19,22,23,24,25,27,28,29,30,31,32,33,54,56,57,58,59,60,61,63,71,72,73,75,83,84,85,86,87,93,95,97,],[10,34,10,38,39,40,44,44,46,47,48,49,50,62,64,65,66,67,68,10,10,78,79,80,81,88,89,90,91,10,101,102,103,]),'condition':([27,28,],[43,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserVLOBJ.py',29),
  ('programme -> statement DOTCOMMA programme','programme',3,'p_programme_recursive','parserVLOBJ.py',34),
  ('statement -> assignation','statement',1,'p_statement','parserVLOBJ.py',39),
  ('statement -> structure','statement',1,'p_statement','parserVLOBJ.py',40),
  ('statement -> square','statement',1,'p_statement','parserVLOBJ.py',41),
  ('statement -> pyramid','statement',1,'p_statement','parserVLOBJ.py',42),
  ('statement -> randomShape','statement',1,'p_statement','parserVLOBJ.py',43),
  ('statement -> randomNumber','statement',1,'p_statement','parserVLOBJ.py',44),
  ('statement -> color','statement',1,'p_statement','parserVLOBJ.py',45),
  ('statement -> expression','statement',1,'p_statement','parserVLOBJ.py',46),
  ('assignation -> IDENTIFIER EQUALS expression','assignation',3,'p_assignation','parserVLOBJ.py',54),
  ('assignation -> IDENTIFIER EQUALS randomNumber','assignation',3,'p_assignation','parserVLOBJ.py',55),
  ('randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','randomShape',10,'p_random_shape','parserVLOBJ.py',60),
  ('randomShape -> XS PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','randomShape',12,'p_random_shape','parserVLOBJ.py',61),
  ('randomNumber -> XD PAR_START expression COMMA expression PAR_END','randomNumber',6,'p_random_number','parserVLOBJ.py',71),
  ('square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','square',10,'p_square','parserVLOBJ.py',76),
  ('square -> SQUARE PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','square',12,'p_square','parserVLOBJ.py',77),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',10,'p_pyramid','parserVLOBJ.py',87),
  ('pyramid -> PYRAMID PAR_START expression COMMA expression COMMA expression COMMA expression COMMA expression PAR_END','pyramid',12,'p_pyramid','parserVLOBJ.py',88),
  ('color -> COLOR PAR_START expression COMMA expression COMMA expression COMMA expression PAR_END','color',10,'p_color','parserVLOBJ.py',98),
  ('structure -> WHILE PAR_START condition PAR_END ACOL_START programme ACOL_END','structure',7,'p_while','parserVLOBJ.py',104),
  ('structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END','structure',7,'p_test','parserVLOBJ.py',109),
  ('structure -> IF PAR_START condition PAR_END ACOL_START programme ACOL_END ELSE ACOL_START programme ACOL_END','structure',11,'p_test','parserVLOBJ.py',110),
  ('condition -> expression CONDITION expression','condition',3,'p_condition','parserVLOBJ.py',118),
  ('expression -> IDENTIFIER ADD_OP UNDERSCORE ADD_OP','expression',4,'p_expression_increment','parserVLOBJ.py',123),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserVLOBJ.py',128),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserVLOBJ.py',129),
  ('expression -> ADD_OP expression','expression',2,'p_expression_uminus','parserVLOBJ.py',134),
  ('expression -> APO IDENTIFIER APO','expression',3,'p_expression_string','parserVLOBJ.py',139),
  ('expression -> NUMBER','expression',1,'p_expression_num','parserVLOBJ.py',144),
  ('expression -> IDENTIFIER','expression',1,'p_expression_IDENTIFIER','parserVLOBJ.py',149),
]
